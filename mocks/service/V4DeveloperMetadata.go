// Code generated by mockery. DO NOT EDIT.

package service

import (
	mock "github.com/stretchr/testify/mock"

	sheets "google.golang.org/api/sheets/v4"
)

// MockV4DeveloperMetadata is an autogenerated mock type for the V4DeveloperMetadata type
type MockV4DeveloperMetadata struct {
	mock.Mock
}

type MockV4DeveloperMetadata_Expecter struct {
	mock *mock.Mock
}

func (_m *MockV4DeveloperMetadata) EXPECT() *MockV4DeveloperMetadata_Expecter {
	return &MockV4DeveloperMetadata_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: spreadsheetId, metadataId
func (_m *MockV4DeveloperMetadata) Get(spreadsheetId string, metadataId int64) *sheets.SpreadsheetsDeveloperMetadataGetCall {
	ret := _m.Called(spreadsheetId, metadataId)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *sheets.SpreadsheetsDeveloperMetadataGetCall
	if rf, ok := ret.Get(0).(func(string, int64) *sheets.SpreadsheetsDeveloperMetadataGetCall); ok {
		r0 = rf(spreadsheetId, metadataId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.SpreadsheetsDeveloperMetadataGetCall)
		}
	}

	return r0
}

// MockV4DeveloperMetadata_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockV4DeveloperMetadata_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - spreadsheetId string
//   - metadataId int64
func (_e *MockV4DeveloperMetadata_Expecter) Get(spreadsheetId interface{}, metadataId interface{}) *MockV4DeveloperMetadata_Get_Call {
	return &MockV4DeveloperMetadata_Get_Call{Call: _e.mock.On("Get", spreadsheetId, metadataId)}
}

func (_c *MockV4DeveloperMetadata_Get_Call) Run(run func(spreadsheetId string, metadataId int64)) *MockV4DeveloperMetadata_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockV4DeveloperMetadata_Get_Call) Return(_a0 *sheets.SpreadsheetsDeveloperMetadataGetCall) *MockV4DeveloperMetadata_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockV4DeveloperMetadata_Get_Call) RunAndReturn(run func(string, int64) *sheets.SpreadsheetsDeveloperMetadataGetCall) *MockV4DeveloperMetadata_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: spreadsheetId, searchdevelopermetadatarequest
func (_m *MockV4DeveloperMetadata) Search(spreadsheetId string, searchdevelopermetadatarequest *sheets.SearchDeveloperMetadataRequest) *sheets.SpreadsheetsDeveloperMetadataSearchCall {
	ret := _m.Called(spreadsheetId, searchdevelopermetadatarequest)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 *sheets.SpreadsheetsDeveloperMetadataSearchCall
	if rf, ok := ret.Get(0).(func(string, *sheets.SearchDeveloperMetadataRequest) *sheets.SpreadsheetsDeveloperMetadataSearchCall); ok {
		r0 = rf(spreadsheetId, searchdevelopermetadatarequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.SpreadsheetsDeveloperMetadataSearchCall)
		}
	}

	return r0
}

// MockV4DeveloperMetadata_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockV4DeveloperMetadata_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - spreadsheetId string
//   - searchdevelopermetadatarequest *sheets.SearchDeveloperMetadataRequest
func (_e *MockV4DeveloperMetadata_Expecter) Search(spreadsheetId interface{}, searchdevelopermetadatarequest interface{}) *MockV4DeveloperMetadata_Search_Call {
	return &MockV4DeveloperMetadata_Search_Call{Call: _e.mock.On("Search", spreadsheetId, searchdevelopermetadatarequest)}
}

func (_c *MockV4DeveloperMetadata_Search_Call) Run(run func(spreadsheetId string, searchdevelopermetadatarequest *sheets.SearchDeveloperMetadataRequest)) *MockV4DeveloperMetadata_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*sheets.SearchDeveloperMetadataRequest))
	})
	return _c
}

func (_c *MockV4DeveloperMetadata_Search_Call) Return(_a0 *sheets.SpreadsheetsDeveloperMetadataSearchCall) *MockV4DeveloperMetadata_Search_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockV4DeveloperMetadata_Search_Call) RunAndReturn(run func(string, *sheets.SearchDeveloperMetadataRequest) *sheets.SpreadsheetsDeveloperMetadataSearchCall) *MockV4DeveloperMetadata_Search_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockV4DeveloperMetadata creates a new instance of MockV4DeveloperMetadata. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockV4DeveloperMetadata(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockV4DeveloperMetadata {
	mock := &MockV4DeveloperMetadata{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
