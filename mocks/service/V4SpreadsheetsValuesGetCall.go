// Code generated by mockery. DO NOT EDIT.

package service

import (
	context "context"
	http "net/http"

	googleapi "google.golang.org/api/googleapi"

	mock "github.com/stretchr/testify/mock"

	sheets "google.golang.org/api/sheets/v4"
)

// MockV4SpreadsheetsValuesGetCall is an autogenerated mock type for the V4SpreadsheetsValuesGetCall type
type MockV4SpreadsheetsValuesGetCall struct {
	mock.Mock
}

type MockV4SpreadsheetsValuesGetCall_Expecter struct {
	mock *mock.Mock
}

func (_m *MockV4SpreadsheetsValuesGetCall) EXPECT() *MockV4SpreadsheetsValuesGetCall_Expecter {
	return &MockV4SpreadsheetsValuesGetCall_Expecter{mock: &_m.Mock}
}

// Context provides a mock function with given fields: ctx
func (_m *MockV4SpreadsheetsValuesGetCall) Context(ctx context.Context) *sheets.SpreadsheetsValuesGetCall {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 *sheets.SpreadsheetsValuesGetCall
	if rf, ok := ret.Get(0).(func(context.Context) *sheets.SpreadsheetsValuesGetCall); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.SpreadsheetsValuesGetCall)
		}
	}

	return r0
}

// MockV4SpreadsheetsValuesGetCall_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type MockV4SpreadsheetsValuesGetCall_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockV4SpreadsheetsValuesGetCall_Expecter) Context(ctx interface{}) *MockV4SpreadsheetsValuesGetCall_Context_Call {
	return &MockV4SpreadsheetsValuesGetCall_Context_Call{Call: _e.mock.On("Context", ctx)}
}

func (_c *MockV4SpreadsheetsValuesGetCall_Context_Call) Run(run func(ctx context.Context)) *MockV4SpreadsheetsValuesGetCall_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockV4SpreadsheetsValuesGetCall_Context_Call) Return(_a0 *sheets.SpreadsheetsValuesGetCall) *MockV4SpreadsheetsValuesGetCall_Context_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockV4SpreadsheetsValuesGetCall_Context_Call) RunAndReturn(run func(context.Context) *sheets.SpreadsheetsValuesGetCall) *MockV4SpreadsheetsValuesGetCall_Context_Call {
	_c.Call.Return(run)
	return _c
}

// DateTimeRenderOption provides a mock function with given fields: dateTimeRenderOption
func (_m *MockV4SpreadsheetsValuesGetCall) DateTimeRenderOption(dateTimeRenderOption string) *sheets.SpreadsheetsValuesGetCall {
	ret := _m.Called(dateTimeRenderOption)

	if len(ret) == 0 {
		panic("no return value specified for DateTimeRenderOption")
	}

	var r0 *sheets.SpreadsheetsValuesGetCall
	if rf, ok := ret.Get(0).(func(string) *sheets.SpreadsheetsValuesGetCall); ok {
		r0 = rf(dateTimeRenderOption)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.SpreadsheetsValuesGetCall)
		}
	}

	return r0
}

// MockV4SpreadsheetsValuesGetCall_DateTimeRenderOption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DateTimeRenderOption'
type MockV4SpreadsheetsValuesGetCall_DateTimeRenderOption_Call struct {
	*mock.Call
}

// DateTimeRenderOption is a helper method to define mock.On call
//   - dateTimeRenderOption string
func (_e *MockV4SpreadsheetsValuesGetCall_Expecter) DateTimeRenderOption(dateTimeRenderOption interface{}) *MockV4SpreadsheetsValuesGetCall_DateTimeRenderOption_Call {
	return &MockV4SpreadsheetsValuesGetCall_DateTimeRenderOption_Call{Call: _e.mock.On("DateTimeRenderOption", dateTimeRenderOption)}
}

func (_c *MockV4SpreadsheetsValuesGetCall_DateTimeRenderOption_Call) Run(run func(dateTimeRenderOption string)) *MockV4SpreadsheetsValuesGetCall_DateTimeRenderOption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockV4SpreadsheetsValuesGetCall_DateTimeRenderOption_Call) Return(_a0 *sheets.SpreadsheetsValuesGetCall) *MockV4SpreadsheetsValuesGetCall_DateTimeRenderOption_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockV4SpreadsheetsValuesGetCall_DateTimeRenderOption_Call) RunAndReturn(run func(string) *sheets.SpreadsheetsValuesGetCall) *MockV4SpreadsheetsValuesGetCall_DateTimeRenderOption_Call {
	_c.Call.Return(run)
	return _c
}

// Do provides a mock function with given fields: opts
func (_m *MockV4SpreadsheetsValuesGetCall) Do(opts ...googleapi.CallOption) (*sheets.ValueRange, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 *sheets.ValueRange
	var r1 error
	if rf, ok := ret.Get(0).(func(...googleapi.CallOption) (*sheets.ValueRange, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...googleapi.CallOption) *sheets.ValueRange); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.ValueRange)
		}
	}

	if rf, ok := ret.Get(1).(func(...googleapi.CallOption) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockV4SpreadsheetsValuesGetCall_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockV4SpreadsheetsValuesGetCall_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - opts ...googleapi.CallOption
func (_e *MockV4SpreadsheetsValuesGetCall_Expecter) Do(opts ...interface{}) *MockV4SpreadsheetsValuesGetCall_Do_Call {
	return &MockV4SpreadsheetsValuesGetCall_Do_Call{Call: _e.mock.On("Do",
		append([]interface{}{}, opts...)...)}
}

func (_c *MockV4SpreadsheetsValuesGetCall_Do_Call) Run(run func(opts ...googleapi.CallOption)) *MockV4SpreadsheetsValuesGetCall_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]googleapi.CallOption, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(googleapi.CallOption)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockV4SpreadsheetsValuesGetCall_Do_Call) Return(_a0 *sheets.ValueRange, _a1 error) *MockV4SpreadsheetsValuesGetCall_Do_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockV4SpreadsheetsValuesGetCall_Do_Call) RunAndReturn(run func(...googleapi.CallOption) (*sheets.ValueRange, error)) *MockV4SpreadsheetsValuesGetCall_Do_Call {
	_c.Call.Return(run)
	return _c
}

// Fields provides a mock function with given fields: s
func (_m *MockV4SpreadsheetsValuesGetCall) Fields(s ...googleapi.Field) *sheets.SpreadsheetsValuesGetCall {
	_va := make([]interface{}, len(s))
	for _i := range s {
		_va[_i] = s[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Fields")
	}

	var r0 *sheets.SpreadsheetsValuesGetCall
	if rf, ok := ret.Get(0).(func(...googleapi.Field) *sheets.SpreadsheetsValuesGetCall); ok {
		r0 = rf(s...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.SpreadsheetsValuesGetCall)
		}
	}

	return r0
}

// MockV4SpreadsheetsValuesGetCall_Fields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fields'
type MockV4SpreadsheetsValuesGetCall_Fields_Call struct {
	*mock.Call
}

// Fields is a helper method to define mock.On call
//   - s ...googleapi.Field
func (_e *MockV4SpreadsheetsValuesGetCall_Expecter) Fields(s ...interface{}) *MockV4SpreadsheetsValuesGetCall_Fields_Call {
	return &MockV4SpreadsheetsValuesGetCall_Fields_Call{Call: _e.mock.On("Fields",
		append([]interface{}{}, s...)...)}
}

func (_c *MockV4SpreadsheetsValuesGetCall_Fields_Call) Run(run func(s ...googleapi.Field)) *MockV4SpreadsheetsValuesGetCall_Fields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]googleapi.Field, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(googleapi.Field)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockV4SpreadsheetsValuesGetCall_Fields_Call) Return(_a0 *sheets.SpreadsheetsValuesGetCall) *MockV4SpreadsheetsValuesGetCall_Fields_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockV4SpreadsheetsValuesGetCall_Fields_Call) RunAndReturn(run func(...googleapi.Field) *sheets.SpreadsheetsValuesGetCall) *MockV4SpreadsheetsValuesGetCall_Fields_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with no fields
func (_m *MockV4SpreadsheetsValuesGetCall) Header() http.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 http.Header
	if rf, ok := ret.Get(0).(func() http.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Header)
		}
	}

	return r0
}

// MockV4SpreadsheetsValuesGetCall_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type MockV4SpreadsheetsValuesGetCall_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *MockV4SpreadsheetsValuesGetCall_Expecter) Header() *MockV4SpreadsheetsValuesGetCall_Header_Call {
	return &MockV4SpreadsheetsValuesGetCall_Header_Call{Call: _e.mock.On("Header")}
}

func (_c *MockV4SpreadsheetsValuesGetCall_Header_Call) Run(run func()) *MockV4SpreadsheetsValuesGetCall_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockV4SpreadsheetsValuesGetCall_Header_Call) Return(_a0 http.Header) *MockV4SpreadsheetsValuesGetCall_Header_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockV4SpreadsheetsValuesGetCall_Header_Call) RunAndReturn(run func() http.Header) *MockV4SpreadsheetsValuesGetCall_Header_Call {
	_c.Call.Return(run)
	return _c
}

// IfNoneMatch provides a mock function with given fields: entityTag
func (_m *MockV4SpreadsheetsValuesGetCall) IfNoneMatch(entityTag string) *sheets.SpreadsheetsValuesGetCall {
	ret := _m.Called(entityTag)

	if len(ret) == 0 {
		panic("no return value specified for IfNoneMatch")
	}

	var r0 *sheets.SpreadsheetsValuesGetCall
	if rf, ok := ret.Get(0).(func(string) *sheets.SpreadsheetsValuesGetCall); ok {
		r0 = rf(entityTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.SpreadsheetsValuesGetCall)
		}
	}

	return r0
}

// MockV4SpreadsheetsValuesGetCall_IfNoneMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IfNoneMatch'
type MockV4SpreadsheetsValuesGetCall_IfNoneMatch_Call struct {
	*mock.Call
}

// IfNoneMatch is a helper method to define mock.On call
//   - entityTag string
func (_e *MockV4SpreadsheetsValuesGetCall_Expecter) IfNoneMatch(entityTag interface{}) *MockV4SpreadsheetsValuesGetCall_IfNoneMatch_Call {
	return &MockV4SpreadsheetsValuesGetCall_IfNoneMatch_Call{Call: _e.mock.On("IfNoneMatch", entityTag)}
}

func (_c *MockV4SpreadsheetsValuesGetCall_IfNoneMatch_Call) Run(run func(entityTag string)) *MockV4SpreadsheetsValuesGetCall_IfNoneMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockV4SpreadsheetsValuesGetCall_IfNoneMatch_Call) Return(_a0 *sheets.SpreadsheetsValuesGetCall) *MockV4SpreadsheetsValuesGetCall_IfNoneMatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockV4SpreadsheetsValuesGetCall_IfNoneMatch_Call) RunAndReturn(run func(string) *sheets.SpreadsheetsValuesGetCall) *MockV4SpreadsheetsValuesGetCall_IfNoneMatch_Call {
	_c.Call.Return(run)
	return _c
}

// MajorDimension provides a mock function with given fields: majorDimension
func (_m *MockV4SpreadsheetsValuesGetCall) MajorDimension(majorDimension string) *sheets.SpreadsheetsValuesGetCall {
	ret := _m.Called(majorDimension)

	if len(ret) == 0 {
		panic("no return value specified for MajorDimension")
	}

	var r0 *sheets.SpreadsheetsValuesGetCall
	if rf, ok := ret.Get(0).(func(string) *sheets.SpreadsheetsValuesGetCall); ok {
		r0 = rf(majorDimension)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.SpreadsheetsValuesGetCall)
		}
	}

	return r0
}

// MockV4SpreadsheetsValuesGetCall_MajorDimension_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MajorDimension'
type MockV4SpreadsheetsValuesGetCall_MajorDimension_Call struct {
	*mock.Call
}

// MajorDimension is a helper method to define mock.On call
//   - majorDimension string
func (_e *MockV4SpreadsheetsValuesGetCall_Expecter) MajorDimension(majorDimension interface{}) *MockV4SpreadsheetsValuesGetCall_MajorDimension_Call {
	return &MockV4SpreadsheetsValuesGetCall_MajorDimension_Call{Call: _e.mock.On("MajorDimension", majorDimension)}
}

func (_c *MockV4SpreadsheetsValuesGetCall_MajorDimension_Call) Run(run func(majorDimension string)) *MockV4SpreadsheetsValuesGetCall_MajorDimension_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockV4SpreadsheetsValuesGetCall_MajorDimension_Call) Return(_a0 *sheets.SpreadsheetsValuesGetCall) *MockV4SpreadsheetsValuesGetCall_MajorDimension_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockV4SpreadsheetsValuesGetCall_MajorDimension_Call) RunAndReturn(run func(string) *sheets.SpreadsheetsValuesGetCall) *MockV4SpreadsheetsValuesGetCall_MajorDimension_Call {
	_c.Call.Return(run)
	return _c
}

// ValueRenderOption provides a mock function with given fields: valueRenderOption
func (_m *MockV4SpreadsheetsValuesGetCall) ValueRenderOption(valueRenderOption string) *sheets.SpreadsheetsValuesGetCall {
	ret := _m.Called(valueRenderOption)

	if len(ret) == 0 {
		panic("no return value specified for ValueRenderOption")
	}

	var r0 *sheets.SpreadsheetsValuesGetCall
	if rf, ok := ret.Get(0).(func(string) *sheets.SpreadsheetsValuesGetCall); ok {
		r0 = rf(valueRenderOption)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.SpreadsheetsValuesGetCall)
		}
	}

	return r0
}

// MockV4SpreadsheetsValuesGetCall_ValueRenderOption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValueRenderOption'
type MockV4SpreadsheetsValuesGetCall_ValueRenderOption_Call struct {
	*mock.Call
}

// ValueRenderOption is a helper method to define mock.On call
//   - valueRenderOption string
func (_e *MockV4SpreadsheetsValuesGetCall_Expecter) ValueRenderOption(valueRenderOption interface{}) *MockV4SpreadsheetsValuesGetCall_ValueRenderOption_Call {
	return &MockV4SpreadsheetsValuesGetCall_ValueRenderOption_Call{Call: _e.mock.On("ValueRenderOption", valueRenderOption)}
}

func (_c *MockV4SpreadsheetsValuesGetCall_ValueRenderOption_Call) Run(run func(valueRenderOption string)) *MockV4SpreadsheetsValuesGetCall_ValueRenderOption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockV4SpreadsheetsValuesGetCall_ValueRenderOption_Call) Return(_a0 *sheets.SpreadsheetsValuesGetCall) *MockV4SpreadsheetsValuesGetCall_ValueRenderOption_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockV4SpreadsheetsValuesGetCall_ValueRenderOption_Call) RunAndReturn(run func(string) *sheets.SpreadsheetsValuesGetCall) *MockV4SpreadsheetsValuesGetCall_ValueRenderOption_Call {
	_c.Call.Return(run)
	return _c
}

// doRequest provides a mock function with given fields: alt
func (_m *MockV4SpreadsheetsValuesGetCall) doRequest(alt string) (*http.Response, error) {
	ret := _m.Called(alt)

	if len(ret) == 0 {
		panic("no return value specified for doRequest")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*http.Response, error)); ok {
		return rf(alt)
	}
	if rf, ok := ret.Get(0).(func(string) *http.Response); ok {
		r0 = rf(alt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(alt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockV4SpreadsheetsValuesGetCall_doRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'doRequest'
type MockV4SpreadsheetsValuesGetCall_doRequest_Call struct {
	*mock.Call
}

// doRequest is a helper method to define mock.On call
//   - alt string
func (_e *MockV4SpreadsheetsValuesGetCall_Expecter) doRequest(alt interface{}) *MockV4SpreadsheetsValuesGetCall_doRequest_Call {
	return &MockV4SpreadsheetsValuesGetCall_doRequest_Call{Call: _e.mock.On("doRequest", alt)}
}

func (_c *MockV4SpreadsheetsValuesGetCall_doRequest_Call) Run(run func(alt string)) *MockV4SpreadsheetsValuesGetCall_doRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockV4SpreadsheetsValuesGetCall_doRequest_Call) Return(_a0 *http.Response, _a1 error) *MockV4SpreadsheetsValuesGetCall_doRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockV4SpreadsheetsValuesGetCall_doRequest_Call) RunAndReturn(run func(string) (*http.Response, error)) *MockV4SpreadsheetsValuesGetCall_doRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockV4SpreadsheetsValuesGetCall creates a new instance of MockV4SpreadsheetsValuesGetCall. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockV4SpreadsheetsValuesGetCall(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockV4SpreadsheetsValuesGetCall {
	mock := &MockV4SpreadsheetsValuesGetCall{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
