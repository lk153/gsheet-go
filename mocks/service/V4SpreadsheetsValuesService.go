// Code generated by mockery. DO NOT EDIT.

package service

import (
	mock "github.com/stretchr/testify/mock"

	sheets "google.golang.org/api/sheets/v4"
)

// MockV4SpreadsheetsValuesService is an autogenerated mock type for the V4SpreadsheetsValuesService type
type MockV4SpreadsheetsValuesService struct {
	mock.Mock
}

type MockV4SpreadsheetsValuesService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockV4SpreadsheetsValuesService) EXPECT() *MockV4SpreadsheetsValuesService_Expecter {
	return &MockV4SpreadsheetsValuesService_Expecter{mock: &_m.Mock}
}

// Append provides a mock function with given fields: spreadsheetId, range_, valuerange
func (_m *MockV4SpreadsheetsValuesService) Append(spreadsheetId string, range_ string, valuerange *sheets.ValueRange) *sheets.SpreadsheetsValuesAppendCall {
	ret := _m.Called(spreadsheetId, range_, valuerange)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 *sheets.SpreadsheetsValuesAppendCall
	if rf, ok := ret.Get(0).(func(string, string, *sheets.ValueRange) *sheets.SpreadsheetsValuesAppendCall); ok {
		r0 = rf(spreadsheetId, range_, valuerange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.SpreadsheetsValuesAppendCall)
		}
	}

	return r0
}

// MockV4SpreadsheetsValuesService_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type MockV4SpreadsheetsValuesService_Append_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - spreadsheetId string
//   - range_ string
//   - valuerange *sheets.ValueRange
func (_e *MockV4SpreadsheetsValuesService_Expecter) Append(spreadsheetId interface{}, range_ interface{}, valuerange interface{}) *MockV4SpreadsheetsValuesService_Append_Call {
	return &MockV4SpreadsheetsValuesService_Append_Call{Call: _e.mock.On("Append", spreadsheetId, range_, valuerange)}
}

func (_c *MockV4SpreadsheetsValuesService_Append_Call) Run(run func(spreadsheetId string, range_ string, valuerange *sheets.ValueRange)) *MockV4SpreadsheetsValuesService_Append_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*sheets.ValueRange))
	})
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_Append_Call) Return(_a0 *sheets.SpreadsheetsValuesAppendCall) *MockV4SpreadsheetsValuesService_Append_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_Append_Call) RunAndReturn(run func(string, string, *sheets.ValueRange) *sheets.SpreadsheetsValuesAppendCall) *MockV4SpreadsheetsValuesService_Append_Call {
	_c.Call.Return(run)
	return _c
}

// BatchClear provides a mock function with given fields: spreadsheetId, batchclearvaluesrequest
func (_m *MockV4SpreadsheetsValuesService) BatchClear(spreadsheetId string, batchclearvaluesrequest *sheets.BatchClearValuesRequest) *sheets.SpreadsheetsValuesBatchClearCall {
	ret := _m.Called(spreadsheetId, batchclearvaluesrequest)

	if len(ret) == 0 {
		panic("no return value specified for BatchClear")
	}

	var r0 *sheets.SpreadsheetsValuesBatchClearCall
	if rf, ok := ret.Get(0).(func(string, *sheets.BatchClearValuesRequest) *sheets.SpreadsheetsValuesBatchClearCall); ok {
		r0 = rf(spreadsheetId, batchclearvaluesrequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.SpreadsheetsValuesBatchClearCall)
		}
	}

	return r0
}

// MockV4SpreadsheetsValuesService_BatchClear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchClear'
type MockV4SpreadsheetsValuesService_BatchClear_Call struct {
	*mock.Call
}

// BatchClear is a helper method to define mock.On call
//   - spreadsheetId string
//   - batchclearvaluesrequest *sheets.BatchClearValuesRequest
func (_e *MockV4SpreadsheetsValuesService_Expecter) BatchClear(spreadsheetId interface{}, batchclearvaluesrequest interface{}) *MockV4SpreadsheetsValuesService_BatchClear_Call {
	return &MockV4SpreadsheetsValuesService_BatchClear_Call{Call: _e.mock.On("BatchClear", spreadsheetId, batchclearvaluesrequest)}
}

func (_c *MockV4SpreadsheetsValuesService_BatchClear_Call) Run(run func(spreadsheetId string, batchclearvaluesrequest *sheets.BatchClearValuesRequest)) *MockV4SpreadsheetsValuesService_BatchClear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*sheets.BatchClearValuesRequest))
	})
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_BatchClear_Call) Return(_a0 *sheets.SpreadsheetsValuesBatchClearCall) *MockV4SpreadsheetsValuesService_BatchClear_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_BatchClear_Call) RunAndReturn(run func(string, *sheets.BatchClearValuesRequest) *sheets.SpreadsheetsValuesBatchClearCall) *MockV4SpreadsheetsValuesService_BatchClear_Call {
	_c.Call.Return(run)
	return _c
}

// BatchClearByDataFilter provides a mock function with given fields: spreadsheetId, batchclearvaluesbydatafilterrequest
func (_m *MockV4SpreadsheetsValuesService) BatchClearByDataFilter(spreadsheetId string, batchclearvaluesbydatafilterrequest *sheets.BatchClearValuesByDataFilterRequest) *sheets.SpreadsheetsValuesBatchClearByDataFilterCall {
	ret := _m.Called(spreadsheetId, batchclearvaluesbydatafilterrequest)

	if len(ret) == 0 {
		panic("no return value specified for BatchClearByDataFilter")
	}

	var r0 *sheets.SpreadsheetsValuesBatchClearByDataFilterCall
	if rf, ok := ret.Get(0).(func(string, *sheets.BatchClearValuesByDataFilterRequest) *sheets.SpreadsheetsValuesBatchClearByDataFilterCall); ok {
		r0 = rf(spreadsheetId, batchclearvaluesbydatafilterrequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.SpreadsheetsValuesBatchClearByDataFilterCall)
		}
	}

	return r0
}

// MockV4SpreadsheetsValuesService_BatchClearByDataFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchClearByDataFilter'
type MockV4SpreadsheetsValuesService_BatchClearByDataFilter_Call struct {
	*mock.Call
}

// BatchClearByDataFilter is a helper method to define mock.On call
//   - spreadsheetId string
//   - batchclearvaluesbydatafilterrequest *sheets.BatchClearValuesByDataFilterRequest
func (_e *MockV4SpreadsheetsValuesService_Expecter) BatchClearByDataFilter(spreadsheetId interface{}, batchclearvaluesbydatafilterrequest interface{}) *MockV4SpreadsheetsValuesService_BatchClearByDataFilter_Call {
	return &MockV4SpreadsheetsValuesService_BatchClearByDataFilter_Call{Call: _e.mock.On("BatchClearByDataFilter", spreadsheetId, batchclearvaluesbydatafilterrequest)}
}

func (_c *MockV4SpreadsheetsValuesService_BatchClearByDataFilter_Call) Run(run func(spreadsheetId string, batchclearvaluesbydatafilterrequest *sheets.BatchClearValuesByDataFilterRequest)) *MockV4SpreadsheetsValuesService_BatchClearByDataFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*sheets.BatchClearValuesByDataFilterRequest))
	})
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_BatchClearByDataFilter_Call) Return(_a0 *sheets.SpreadsheetsValuesBatchClearByDataFilterCall) *MockV4SpreadsheetsValuesService_BatchClearByDataFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_BatchClearByDataFilter_Call) RunAndReturn(run func(string, *sheets.BatchClearValuesByDataFilterRequest) *sheets.SpreadsheetsValuesBatchClearByDataFilterCall) *MockV4SpreadsheetsValuesService_BatchClearByDataFilter_Call {
	_c.Call.Return(run)
	return _c
}

// BatchGet provides a mock function with given fields: spreadsheetId
func (_m *MockV4SpreadsheetsValuesService) BatchGet(spreadsheetId string) *sheets.SpreadsheetsValuesBatchGetCall {
	ret := _m.Called(spreadsheetId)

	if len(ret) == 0 {
		panic("no return value specified for BatchGet")
	}

	var r0 *sheets.SpreadsheetsValuesBatchGetCall
	if rf, ok := ret.Get(0).(func(string) *sheets.SpreadsheetsValuesBatchGetCall); ok {
		r0 = rf(spreadsheetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.SpreadsheetsValuesBatchGetCall)
		}
	}

	return r0
}

// MockV4SpreadsheetsValuesService_BatchGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchGet'
type MockV4SpreadsheetsValuesService_BatchGet_Call struct {
	*mock.Call
}

// BatchGet is a helper method to define mock.On call
//   - spreadsheetId string
func (_e *MockV4SpreadsheetsValuesService_Expecter) BatchGet(spreadsheetId interface{}) *MockV4SpreadsheetsValuesService_BatchGet_Call {
	return &MockV4SpreadsheetsValuesService_BatchGet_Call{Call: _e.mock.On("BatchGet", spreadsheetId)}
}

func (_c *MockV4SpreadsheetsValuesService_BatchGet_Call) Run(run func(spreadsheetId string)) *MockV4SpreadsheetsValuesService_BatchGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_BatchGet_Call) Return(_a0 *sheets.SpreadsheetsValuesBatchGetCall) *MockV4SpreadsheetsValuesService_BatchGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_BatchGet_Call) RunAndReturn(run func(string) *sheets.SpreadsheetsValuesBatchGetCall) *MockV4SpreadsheetsValuesService_BatchGet_Call {
	_c.Call.Return(run)
	return _c
}

// BatchGetByDataFilter provides a mock function with given fields: spreadsheetId, batchgetvaluesbydatafilterrequest
func (_m *MockV4SpreadsheetsValuesService) BatchGetByDataFilter(spreadsheetId string, batchgetvaluesbydatafilterrequest *sheets.BatchGetValuesByDataFilterRequest) *sheets.SpreadsheetsValuesBatchGetByDataFilterCall {
	ret := _m.Called(spreadsheetId, batchgetvaluesbydatafilterrequest)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetByDataFilter")
	}

	var r0 *sheets.SpreadsheetsValuesBatchGetByDataFilterCall
	if rf, ok := ret.Get(0).(func(string, *sheets.BatchGetValuesByDataFilterRequest) *sheets.SpreadsheetsValuesBatchGetByDataFilterCall); ok {
		r0 = rf(spreadsheetId, batchgetvaluesbydatafilterrequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.SpreadsheetsValuesBatchGetByDataFilterCall)
		}
	}

	return r0
}

// MockV4SpreadsheetsValuesService_BatchGetByDataFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchGetByDataFilter'
type MockV4SpreadsheetsValuesService_BatchGetByDataFilter_Call struct {
	*mock.Call
}

// BatchGetByDataFilter is a helper method to define mock.On call
//   - spreadsheetId string
//   - batchgetvaluesbydatafilterrequest *sheets.BatchGetValuesByDataFilterRequest
func (_e *MockV4SpreadsheetsValuesService_Expecter) BatchGetByDataFilter(spreadsheetId interface{}, batchgetvaluesbydatafilterrequest interface{}) *MockV4SpreadsheetsValuesService_BatchGetByDataFilter_Call {
	return &MockV4SpreadsheetsValuesService_BatchGetByDataFilter_Call{Call: _e.mock.On("BatchGetByDataFilter", spreadsheetId, batchgetvaluesbydatafilterrequest)}
}

func (_c *MockV4SpreadsheetsValuesService_BatchGetByDataFilter_Call) Run(run func(spreadsheetId string, batchgetvaluesbydatafilterrequest *sheets.BatchGetValuesByDataFilterRequest)) *MockV4SpreadsheetsValuesService_BatchGetByDataFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*sheets.BatchGetValuesByDataFilterRequest))
	})
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_BatchGetByDataFilter_Call) Return(_a0 *sheets.SpreadsheetsValuesBatchGetByDataFilterCall) *MockV4SpreadsheetsValuesService_BatchGetByDataFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_BatchGetByDataFilter_Call) RunAndReturn(run func(string, *sheets.BatchGetValuesByDataFilterRequest) *sheets.SpreadsheetsValuesBatchGetByDataFilterCall) *MockV4SpreadsheetsValuesService_BatchGetByDataFilter_Call {
	_c.Call.Return(run)
	return _c
}

// BatchUpdate provides a mock function with given fields: spreadsheetId, batchupdatevaluesrequest
func (_m *MockV4SpreadsheetsValuesService) BatchUpdate(spreadsheetId string, batchupdatevaluesrequest *sheets.BatchUpdateValuesRequest) *sheets.SpreadsheetsValuesBatchUpdateCall {
	ret := _m.Called(spreadsheetId, batchupdatevaluesrequest)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdate")
	}

	var r0 *sheets.SpreadsheetsValuesBatchUpdateCall
	if rf, ok := ret.Get(0).(func(string, *sheets.BatchUpdateValuesRequest) *sheets.SpreadsheetsValuesBatchUpdateCall); ok {
		r0 = rf(spreadsheetId, batchupdatevaluesrequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.SpreadsheetsValuesBatchUpdateCall)
		}
	}

	return r0
}

// MockV4SpreadsheetsValuesService_BatchUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchUpdate'
type MockV4SpreadsheetsValuesService_BatchUpdate_Call struct {
	*mock.Call
}

// BatchUpdate is a helper method to define mock.On call
//   - spreadsheetId string
//   - batchupdatevaluesrequest *sheets.BatchUpdateValuesRequest
func (_e *MockV4SpreadsheetsValuesService_Expecter) BatchUpdate(spreadsheetId interface{}, batchupdatevaluesrequest interface{}) *MockV4SpreadsheetsValuesService_BatchUpdate_Call {
	return &MockV4SpreadsheetsValuesService_BatchUpdate_Call{Call: _e.mock.On("BatchUpdate", spreadsheetId, batchupdatevaluesrequest)}
}

func (_c *MockV4SpreadsheetsValuesService_BatchUpdate_Call) Run(run func(spreadsheetId string, batchupdatevaluesrequest *sheets.BatchUpdateValuesRequest)) *MockV4SpreadsheetsValuesService_BatchUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*sheets.BatchUpdateValuesRequest))
	})
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_BatchUpdate_Call) Return(_a0 *sheets.SpreadsheetsValuesBatchUpdateCall) *MockV4SpreadsheetsValuesService_BatchUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_BatchUpdate_Call) RunAndReturn(run func(string, *sheets.BatchUpdateValuesRequest) *sheets.SpreadsheetsValuesBatchUpdateCall) *MockV4SpreadsheetsValuesService_BatchUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// BatchUpdateByDataFilter provides a mock function with given fields: spreadsheetId, batchupdatevaluesbydatafilterrequest
func (_m *MockV4SpreadsheetsValuesService) BatchUpdateByDataFilter(spreadsheetId string, batchupdatevaluesbydatafilterrequest *sheets.BatchUpdateValuesByDataFilterRequest) *sheets.SpreadsheetsValuesBatchUpdateByDataFilterCall {
	ret := _m.Called(spreadsheetId, batchupdatevaluesbydatafilterrequest)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateByDataFilter")
	}

	var r0 *sheets.SpreadsheetsValuesBatchUpdateByDataFilterCall
	if rf, ok := ret.Get(0).(func(string, *sheets.BatchUpdateValuesByDataFilterRequest) *sheets.SpreadsheetsValuesBatchUpdateByDataFilterCall); ok {
		r0 = rf(spreadsheetId, batchupdatevaluesbydatafilterrequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.SpreadsheetsValuesBatchUpdateByDataFilterCall)
		}
	}

	return r0
}

// MockV4SpreadsheetsValuesService_BatchUpdateByDataFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchUpdateByDataFilter'
type MockV4SpreadsheetsValuesService_BatchUpdateByDataFilter_Call struct {
	*mock.Call
}

// BatchUpdateByDataFilter is a helper method to define mock.On call
//   - spreadsheetId string
//   - batchupdatevaluesbydatafilterrequest *sheets.BatchUpdateValuesByDataFilterRequest
func (_e *MockV4SpreadsheetsValuesService_Expecter) BatchUpdateByDataFilter(spreadsheetId interface{}, batchupdatevaluesbydatafilterrequest interface{}) *MockV4SpreadsheetsValuesService_BatchUpdateByDataFilter_Call {
	return &MockV4SpreadsheetsValuesService_BatchUpdateByDataFilter_Call{Call: _e.mock.On("BatchUpdateByDataFilter", spreadsheetId, batchupdatevaluesbydatafilterrequest)}
}

func (_c *MockV4SpreadsheetsValuesService_BatchUpdateByDataFilter_Call) Run(run func(spreadsheetId string, batchupdatevaluesbydatafilterrequest *sheets.BatchUpdateValuesByDataFilterRequest)) *MockV4SpreadsheetsValuesService_BatchUpdateByDataFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*sheets.BatchUpdateValuesByDataFilterRequest))
	})
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_BatchUpdateByDataFilter_Call) Return(_a0 *sheets.SpreadsheetsValuesBatchUpdateByDataFilterCall) *MockV4SpreadsheetsValuesService_BatchUpdateByDataFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_BatchUpdateByDataFilter_Call) RunAndReturn(run func(string, *sheets.BatchUpdateValuesByDataFilterRequest) *sheets.SpreadsheetsValuesBatchUpdateByDataFilterCall) *MockV4SpreadsheetsValuesService_BatchUpdateByDataFilter_Call {
	_c.Call.Return(run)
	return _c
}

// Clear provides a mock function with given fields: spreadsheetId, range_, clearvaluesrequest
func (_m *MockV4SpreadsheetsValuesService) Clear(spreadsheetId string, range_ string, clearvaluesrequest *sheets.ClearValuesRequest) *sheets.SpreadsheetsValuesClearCall {
	ret := _m.Called(spreadsheetId, range_, clearvaluesrequest)

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 *sheets.SpreadsheetsValuesClearCall
	if rf, ok := ret.Get(0).(func(string, string, *sheets.ClearValuesRequest) *sheets.SpreadsheetsValuesClearCall); ok {
		r0 = rf(spreadsheetId, range_, clearvaluesrequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.SpreadsheetsValuesClearCall)
		}
	}

	return r0
}

// MockV4SpreadsheetsValuesService_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockV4SpreadsheetsValuesService_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
//   - spreadsheetId string
//   - range_ string
//   - clearvaluesrequest *sheets.ClearValuesRequest
func (_e *MockV4SpreadsheetsValuesService_Expecter) Clear(spreadsheetId interface{}, range_ interface{}, clearvaluesrequest interface{}) *MockV4SpreadsheetsValuesService_Clear_Call {
	return &MockV4SpreadsheetsValuesService_Clear_Call{Call: _e.mock.On("Clear", spreadsheetId, range_, clearvaluesrequest)}
}

func (_c *MockV4SpreadsheetsValuesService_Clear_Call) Run(run func(spreadsheetId string, range_ string, clearvaluesrequest *sheets.ClearValuesRequest)) *MockV4SpreadsheetsValuesService_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*sheets.ClearValuesRequest))
	})
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_Clear_Call) Return(_a0 *sheets.SpreadsheetsValuesClearCall) *MockV4SpreadsheetsValuesService_Clear_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_Clear_Call) RunAndReturn(run func(string, string, *sheets.ClearValuesRequest) *sheets.SpreadsheetsValuesClearCall) *MockV4SpreadsheetsValuesService_Clear_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: spreadsheetId, range_
func (_m *MockV4SpreadsheetsValuesService) Get(spreadsheetId string, range_ string) *sheets.SpreadsheetsValuesGetCall {
	ret := _m.Called(spreadsheetId, range_)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *sheets.SpreadsheetsValuesGetCall
	if rf, ok := ret.Get(0).(func(string, string) *sheets.SpreadsheetsValuesGetCall); ok {
		r0 = rf(spreadsheetId, range_)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.SpreadsheetsValuesGetCall)
		}
	}

	return r0
}

// MockV4SpreadsheetsValuesService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockV4SpreadsheetsValuesService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - spreadsheetId string
//   - range_ string
func (_e *MockV4SpreadsheetsValuesService_Expecter) Get(spreadsheetId interface{}, range_ interface{}) *MockV4SpreadsheetsValuesService_Get_Call {
	return &MockV4SpreadsheetsValuesService_Get_Call{Call: _e.mock.On("Get", spreadsheetId, range_)}
}

func (_c *MockV4SpreadsheetsValuesService_Get_Call) Run(run func(spreadsheetId string, range_ string)) *MockV4SpreadsheetsValuesService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_Get_Call) Return(_a0 *sheets.SpreadsheetsValuesGetCall) *MockV4SpreadsheetsValuesService_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_Get_Call) RunAndReturn(run func(string, string) *sheets.SpreadsheetsValuesGetCall) *MockV4SpreadsheetsValuesService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: spreadsheetId, range_, valuerange
func (_m *MockV4SpreadsheetsValuesService) Update(spreadsheetId string, range_ string, valuerange *sheets.ValueRange) *sheets.SpreadsheetsValuesUpdateCall {
	ret := _m.Called(spreadsheetId, range_, valuerange)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *sheets.SpreadsheetsValuesUpdateCall
	if rf, ok := ret.Get(0).(func(string, string, *sheets.ValueRange) *sheets.SpreadsheetsValuesUpdateCall); ok {
		r0 = rf(spreadsheetId, range_, valuerange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.SpreadsheetsValuesUpdateCall)
		}
	}

	return r0
}

// MockV4SpreadsheetsValuesService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockV4SpreadsheetsValuesService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - spreadsheetId string
//   - range_ string
//   - valuerange *sheets.ValueRange
func (_e *MockV4SpreadsheetsValuesService_Expecter) Update(spreadsheetId interface{}, range_ interface{}, valuerange interface{}) *MockV4SpreadsheetsValuesService_Update_Call {
	return &MockV4SpreadsheetsValuesService_Update_Call{Call: _e.mock.On("Update", spreadsheetId, range_, valuerange)}
}

func (_c *MockV4SpreadsheetsValuesService_Update_Call) Run(run func(spreadsheetId string, range_ string, valuerange *sheets.ValueRange)) *MockV4SpreadsheetsValuesService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*sheets.ValueRange))
	})
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_Update_Call) Return(_a0 *sheets.SpreadsheetsValuesUpdateCall) *MockV4SpreadsheetsValuesService_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockV4SpreadsheetsValuesService_Update_Call) RunAndReturn(run func(string, string, *sheets.ValueRange) *sheets.SpreadsheetsValuesUpdateCall) *MockV4SpreadsheetsValuesService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockV4SpreadsheetsValuesService creates a new instance of MockV4SpreadsheetsValuesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockV4SpreadsheetsValuesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockV4SpreadsheetsValuesService {
	mock := &MockV4SpreadsheetsValuesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
