// Code generated by mockery. DO NOT EDIT.

package service

import (
	mock "github.com/stretchr/testify/mock"

	sheets "google.golang.org/api/sheets/v4"
)

// MockISheetService is an autogenerated mock type for the ISheetService type
type MockISheetService struct {
	mock.Mock
}

type MockISheetService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockISheetService) EXPECT() *MockISheetService_Expecter {
	return &MockISheetService_Expecter{mock: &_m.Mock}
}

// Append provides a mock function with given fields: spreadsheetID, range_, values
func (_m *MockISheetService) Append(spreadsheetID string, range_ string, values [][]any) (*sheets.AppendValuesResponse, error) {
	ret := _m.Called(spreadsheetID, range_, values)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 *sheets.AppendValuesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, [][]any) (*sheets.AppendValuesResponse, error)); ok {
		return rf(spreadsheetID, range_, values)
	}
	if rf, ok := ret.Get(0).(func(string, string, [][]any) *sheets.AppendValuesResponse); ok {
		r0 = rf(spreadsheetID, range_, values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.AppendValuesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, [][]any) error); ok {
		r1 = rf(spreadsheetID, range_, values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockISheetService_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type MockISheetService_Append_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - spreadsheetID string
//   - range_ string
//   - values [][]any
func (_e *MockISheetService_Expecter) Append(spreadsheetID interface{}, range_ interface{}, values interface{}) *MockISheetService_Append_Call {
	return &MockISheetService_Append_Call{Call: _e.mock.On("Append", spreadsheetID, range_, values)}
}

func (_c *MockISheetService_Append_Call) Run(run func(spreadsheetID string, range_ string, values [][]any)) *MockISheetService_Append_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([][]any))
	})
	return _c
}

func (_c *MockISheetService_Append_Call) Return(resp *sheets.AppendValuesResponse, err error) *MockISheetService_Append_Call {
	_c.Call.Return(resp, err)
	return _c
}

func (_c *MockISheetService_Append_Call) RunAndReturn(run func(string, string, [][]any) (*sheets.AppendValuesResponse, error)) *MockISheetService_Append_Call {
	_c.Call.Return(run)
	return _c
}

// ReadSheet provides a mock function with given fields: spreadsheetID, readRange
func (_m *MockISheetService) ReadSheet(spreadsheetID string, readRange string) [][]string {
	ret := _m.Called(spreadsheetID, readRange)

	if len(ret) == 0 {
		panic("no return value specified for ReadSheet")
	}

	var r0 [][]string
	if rf, ok := ret.Get(0).(func(string, string) [][]string); ok {
		r0 = rf(spreadsheetID, readRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]string)
		}
	}

	return r0
}

// MockISheetService_ReadSheet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadSheet'
type MockISheetService_ReadSheet_Call struct {
	*mock.Call
}

// ReadSheet is a helper method to define mock.On call
//   - spreadsheetID string
//   - readRange string
func (_e *MockISheetService_Expecter) ReadSheet(spreadsheetID interface{}, readRange interface{}) *MockISheetService_ReadSheet_Call {
	return &MockISheetService_ReadSheet_Call{Call: _e.mock.On("ReadSheet", spreadsheetID, readRange)}
}

func (_c *MockISheetService_ReadSheet_Call) Run(run func(spreadsheetID string, readRange string)) *MockISheetService_ReadSheet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockISheetService_ReadSheet_Call) Return(values [][]string) *MockISheetService_ReadSheet_Call {
	_c.Call.Return(values)
	return _c
}

func (_c *MockISheetService_ReadSheet_Call) RunAndReturn(run func(string, string) [][]string) *MockISheetService_ReadSheet_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockISheetService creates a new instance of MockISheetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockISheetService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockISheetService {
	mock := &MockISheetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
